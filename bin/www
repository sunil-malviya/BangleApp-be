#!/usr/bin/env node

/**
 * Advanced startup script for an Express app using ESM.
 */
import http from 'http';
import process from 'process';
import { fileURLToPath } from 'url';
import path from 'path';
import dotenv from 'dotenv';
import debugLib from 'debug';          // 'debug' library
import app from '../app.js';   
import prisma from '../db/prisma.js';         // Make sure app.js is also ESM or compiled
                                        // e.g., import express from 'express';

const debug = debugLib('bangle-app-be:server');

// --------------------------------------------------------
// 1) Recreate __dirname in ESM
// --------------------------------------------------------
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// --------------------------------------------------------
// 2) Load Environment
// --------------------------------------------------------
const env = process.env.NODE_ENV || 'local';

// Choose which .env file to load based on NODE_ENV
switch (env) {
  case 'production':
    dotenv.config({ path: path.resolve(__dirname, '../.env.production') });
    break;
  case 'development':
    dotenv.config({ path: path.resolve(__dirname, '../.env.development') });
    break;
  default:
    // Fallback if no matching environment
    dotenv.config({ path: path.resolve(__dirname, '../.env') });
    break;
}

// Debug logs to see what's happening
console.log(`Environment: ${env}`);
console.log(`Loaded PORT from env: ${process.env.PORT}`);

// --------------------------------------------------------
// 3) Get port & store in Express
// --------------------------------------------------------
const port = normalizePort(process.env.PORT || 3000);
app.set('port', port);

// --------------------------------------------------------
// 4) Create HTTP server & start listening
// --------------------------------------------------------
const server = http.createServer(app);

server.listen(port, () => {
  console.log(`${env} Listening on port ${port}`);
  debug(`Server started on port ${port}`);
});

// --------------------------------------------------------
// 5) Add error handlers & graceful shutdown
// --------------------------------------------------------
server.on('error', onError);
server.on('close', onClose);

// If you want to capture signals to gracefully shut down:
process.on('SIGINT', () => {
  console.log('Received SIGINT, shutting down gracefully...');
  shutdown();
});
process.on('SIGTERM', () => {
  console.log('Received SIGTERM, shutting down gracefully...');
  shutdown();
});

// Optional: Capture unhandled Promise rejections
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  // Decide whether to shut down or continue...
});

// --------------------------------------------------------
// 6) Helper functions
// --------------------------------------------------------
function normalizePort(val) {
  const intPort = parseInt(val, 10);
  if (isNaN(intPort)) return val;   // Named pipe
  if (intPort >= 0) return intPort; // Port number
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onClose() {
  console.log('Server closed.');
  debug('Server closed event triggered');
}

/**
 * Graceful shutdown procedure:
 *  1) Stop accepting new requests
 *  2) Close existing connections
 *  3) Exit process
 */
function shutdown() {
  server.close(async (err) => {
    if (err) {
      console.error('Error closing server:', err);
      process.exit(1);
    }
    console.log('HTTP server closed. Disconnecting Prisma...');
    // await prisma.$disconnect();
    process.exit(0);
  });
}