// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String?
  mobile       String        @unique
  fullName     String
  status       Status        @default(ACTIVE)
  image        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  organization Organization?
}

model Organization {
  id         String           @id @default(uuid())
  orgName    String
  orgMobile  String           
  orgEmail   String?
  orgPincode String
  orgCity    String
  orgState   String
  orgAddress String
  orgType    OrganizationType
  orgStatus  Status           @default(ACTIVE)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  orgGST     String?
  orgPAN     String?
  orgCIN     String?
  orgTAN     String?
  orgLogo    String?
  orgWebsite String?
  orgAbout   String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
  designs Design[] 
  pipeMakerJobs PipeMakerJob[]
 
}

enum OrganizationType {
  MANUFACTURER
  KARIGAR
  AGENT
  PIPEMAKER
}

enum Status {
  ACTIVE
  INACTIVE
}

model Design{
  id             String   @id @default(uuid()) 
  name           String
  image          String
  images         String[]
  sizeFrom       Float   
  sizeTo         Float     

  colors     String[] 
  rate            Float      
  details        String  
  organizationId String   
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade) 
  
  createdAt      DateTime @default(now()) 
  updatedAt      DateTime @updatedAt // Auto-updated timestamp
}

model Worker {
  id             String        @id @default(uuid())
  fullName       String
  mobile         String        @unique
  address        String
  shopName       String
  workerType     workerType
  organizationId String
  status         Int           @default(1)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  PipeMakerJobs  PipeMakerJob[] 
}

enum workerType {
  KARIGAR
  AGENT
  PIPEMAKER
}

enum worktype {
  Online
  Offline
  
}

model PipeMakerJob {
  id              String      @id @default(uuid())

  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
  workerStatus    worktype

  workerOnlineId  String? 

  workerOfflineId String?  
  workerOffline   Worker? @relation(fields: [workerOfflineId], references: [id])

  createdDate      DateTime
  completionDate  DateTime?
  totalPipeQty    Int
  totalitem       Int
  pipeItems       PipeItem[]
  materialDetails Json
  status          Int   //  -  1 pending  2 completed
  isdeleted       Int   @default(0) /// 1 = deleted and 0 not 
}

model PipeItem {
  id              String       @id @default(uuid())
  jobId           String
  job             PipeMakerJob @relation(fields: [jobId], references: [id])
  size            String
  weight          String
  rate            Float
  rateType        String
  colorQuantities Json   
  total_qty       Int
  total_item      Int
  isdeleted       Int   @default(0) /// 1 = deleted and 0 not 
}

model Nagina {
  id             String        @id @default(uuid())
  naginaName     String        @unique
  naginaSize     String        @unique
  image          String?
  organizationId String
  isdeleted      Int           @default(0) /// 1 = deleted and 0 not  
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}