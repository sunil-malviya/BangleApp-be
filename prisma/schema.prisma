// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String?
  mobile       String        @unique
  fullName     String
  status       Status        @default(ACTIVE)
  image        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  organization Organization?
  pipeMakerJobs PipeMakerJob[] @relation("WorkerOnlineRelation")
}

model Organization {
  id         String           @id @default(uuid())
  orgName    String
  orgMobile  String           
  orgEmail   String?
  orgPincode String
  orgCity    String
  orgState   String
  orgAddress String
  orgType    OrganizationType
  orgStatus  Status           @default(ACTIVE)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  orgGST     String?
  orgPAN     String?
  orgCIN     String?
  orgTAN     String?
  orgLogo    String?
  orgWebsite String?
  orgAbout   String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
  designs Design[] 
  pipeMakerJobs PipeMakerJob[]
  cuttingKarigarJobs CuttingKarigarJob[]
  pipeStocks PipeStock[]
  cuttingStocks CuttingStock[]
  stockTransactions StockTransaction[]
}

enum OrganizationType {
  MANUFACTURER
  KARIGAR
  AGENT
  PIPEMAKER
}

enum Status {
  ACTIVE
  INACTIVE
}

model Design{
  id             String   @id @default(uuid()) 
  name           String
  image          String
  images         String[]
  sizeFrom       Float   
  sizeTo         Float     

  colors     String[] 
  rate            Float      
  details        String  
  organizationId String   
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade) 
  
  createdAt      DateTime @default(now()) 
  updatedAt      DateTime @updatedAt // Auto-updated timestamp
}

model Worker {
  id             String        @id @default(uuid())
  fullName       String
  mobile         String        @unique
  address        String
  shopName       String
  workerType     workerType
  organizationId String
  status         Int           @default(1)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  PipeMakerJobs  PipeMakerJob[] 
 CuttingKarigarJobs CuttingKarigarJob[]
}

enum workerType {
  KARIGAR
  AGENT
  PIPEMAKER
}

enum worktype {
  Online
  Offline
  
}

model PipeMakerJob {
  id              String      @id @default(uuid())

  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
  workerStatus    worktype


  workerOnlineId   String?
  workerOnline     User? @relation(name: "WorkerOnlineRelation", fields: [workerOnlineId], references: [id])

  workerOfflineId String?  
  workerOffline   Worker? @relation(fields: [workerOfflineId], references: [id])

  createdDate      DateTime
  completionDate  DateTime?
  totalPipeQty    Int
  totalitem       Int
  pipeItems       PipeItem[]
  materialDetails Json
  status          Int   //  -  1 pending  2 completed
  isdeleted       Int   @default(0) /// 1 = deleted and 0 not 
  note            String? @default("")
}

model PipeItem {
  id              String       @id @default(uuid())
  jobId           String
  job             PipeMakerJob @relation(fields: [jobId], references: [id])
  size            String
  weight          String
  rate            Float
  rateType        String
  colorQuantities Json   
  total_qty       Int
  total_item      Int
  isdeleted       Int   @default(0) /// 1 = deleted and 0 not 

}

model Nagina {
  id             String        @id @default(uuid())
  naginaName     String        
  naginaSize     String        
  image          String?
  organizationId String
  isdeleted      Int           @default(0) /// 1 = deleted and 0 not  
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  cuttingItems   CuttingItem[]
  cuttingStocks  CuttingStock[]
}

model Pipesize {
     id             String        @id @default(uuid())
     label          String
     value          String      
     order          Int
     isdeleted      Int           @default(0) /// 1 = deleted and 0 not  
     createdAt      DateTime      @default(now())
     updatedAt      DateTime      @updatedAt
}

model Color {
     id             String        @id @default(uuid())
     name           String
     value          String
     isdeleted      Int           @default(0) /// 1 = deleted and 0 not  
     createdAt      DateTime      @default(now())
     updatedAt      DateTime      @updatedAt
}

model CuttingKarigarJob {
  id               String        @id @default(uuid())
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id])
  workerStatus     worktype
  workerOnlineId   String?
  workerOfflineId  String?
  workerOffline    Worker? @relation(fields: [workerOfflineId], references: [id])
  createdDate      DateTime
  completionDate   DateTime?
  totalAvgBangleQty Int
  totalPipeQty      Int
  totalitem         Int
  totalPrice        Float
  cuttingItems      CuttingItem[]
  note             String?
  status           Int   //  -  1 pending  2 completed
  isdeleted        Int   @default(0) /// 1 = deleted and 0 not

}

model CuttingItem {
  id               String        @id @default(uuid())
  jobId            String
  job              CuttingKarigarJob @relation(fields: [jobId], references: [id])
  pipeStockId      String
  pipeStock        PipeStock     @relation(fields: [pipeStockId], references: [id])
  pipeQty          Int
  AvgBangleQty     Int
  bangleWidth      Int
  naginaId         String
  nagina           Nagina        @relation(fields: [naginaId], references: [id])
  isdeleted        Int           @default(0) /// 1 = deleted and 0 not
  perPipeCuttingPrice Float
  receivedQty      Int
  receivedDate     DateTime?
  receivedLog      Json?
  totalItemBangles Int           @default(0)
}

enum StockType {
  PIPE
  NAGINA
  CUTTING
  MATERIAL
  BANGLE
  OTHER
}

enum TransactionType {
  INWARD
  OUTWARD
  ADJUSTMENT
  RETURN
}

model StockTransaction {
  id             String           @id @default(uuid())
  stockId        String
  stockType      StockType
  transactionType TransactionType
  quantity       Int
  remainingStock Int
  note           String?
  jobId          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organizationId String?
  organization   Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  

  pipeStockId      String?
  pipeStock        PipeStock?       @relation(fields: [pipeStockId], references: [id], onDelete: Cascade)

  cuttingStockId   String?
  cuttingStock     CuttingStock?    @relation(fields: [cuttingStockId], references: [id], onDelete: Cascade)

  

  //pipeStock      PipeStock?       @relation(fields: [stockId], references: [id], onDelete: Cascade, map: "StockTransaction_pipeStock_fkey")
 // cuttingStock   CuttingStock?    @relation(fields: [stockId], references: [id], onDelete: Cascade, map: "StockTransaction_cuttingStock_fkey")

  @@index([stockId, stockType])
  @@index([transactionType])
  @@index([createdAt])
}

model PipeStock {
  id             String             @id @default(uuid())
  size           String
  weight         String
  color          String
  stock          Int
  isdeleted      Int                @default(0) /// 1 = deleted and 0 not
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  organizationId String
  organization   Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  cuttingItems   CuttingItem[]
  transactions   StockTransaction[]
  
  @@unique([organizationId, size, weight, color])
}

model CuttingStock {
  id             String             @id @default(uuid())
  size           String
  color          String
  width          Float
  naginaId       String
  nagina         Nagina             @relation(fields: [naginaId], references: [id])
  quantity       Int
  batchNumber    String?
  jobId          String?            // Reference to the cutting job that created this stock
  isdeleted      Int                @default(0) /// 1 = deleted and 0 not
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  organizationId String
  organization   Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  transactions   StockTransaction[]

  @@unique([organizationId, size, color, width, naginaId])
}